#!/usr/bin/env python3

# import statements
import argparse
import json
import select
import socket
import copy
import ipaddress

# Creating Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Creating Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Updating Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# Message route information
CUST = "cust"
PEER = "peer"
PROV = "prov"

class Router:
  def __init__(self, asn, connections):
    self.routes = {}
    self.updates = []
    self.relations = {}
    self.sockets = {}
    self.ftab = []
    self.ports = {}
    self.asn = asn
    
    print("Router at AS %s starting up" % asn)
    for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))
            
  # sending a message
  def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

  # returning the address
  def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

  def similar_network(self, n1, n2):
    n1_split = n1.split('.')
    n2_split = n2.split('.')
    return n1_split[0] == n2_split[0]

  # looking up valid routes
  def lookup_routes(self, daddr):
    outroutes = []
    for entry in self.ftab:
        if self.similar_network(entry['network'], daddr):
            outroutes.append(entry['peer'])
    return outroutes

# obtaining shortest route 
  def get_shortest_as_path(self, routes, daddr):
    """ select the route with the shortest AS Path """
    outroutes = []
    min = 0
    for route in routes:
      for e in self.ftab: 
        if e[PEER] == route and self.similar_network(e[NTWK], daddr):
          if len(e[APTH]) == min:
            outroutes.append(route)
          elif len(e[APTH]) < min or len(outroutes) == 0:
            min = len(e[APTH])
            outroutes = [route]
    return outroutes

  # obtaining route with the highest preference 
  def get_highest_preference(self, routes, daddr):
    outroutes = []
    max = 0
    for route in routes:
      for e in self.ftab:
        if e[PEER] == route and self.similar_network(e[NTWK], daddr):
          if e[LPRF] == max and route not in outroutes:
            outroutes.append(route)
          elif e[LPRF] > max:
            max = e[LPRF]
            outroutes = [route]
    return outroutes
    
  # obtaining self originating routes
  def get_self_origin(self, routes, daddr):
    outroutes = []
    all_false = True
    for route in routes:
      for e in self.ftab:
        if e[PEER] == route and self.similar_network(e[NTWK], daddr):
            if e[SORG]:
                outroutes.append(route)
                all_false= False
            elif all_false:
                return routes
    return outroutes

  # obtaining origin routes
  def get_origin_routes(self, routes, daddr):
    outroutes = []
    origins = {"IGP": 1,"EGP": 2,"UNK": 3}
    origin = 3
    for route in routes:
      for e in self.ftab:
        if e[PEER] == route and self.similar_network(e[NTWK], daddr):
          if origins[e[ORIG]] < origin:
            origin = origins[e[ORIG]]
            outroutes = [route]
          elif origins[e[ORIG]] == origin:
            outroutes.append(route)
    return outroutes 

  # handle relations
  def filter_relationships(self, srcif, daddr, routes):
    outroutes = []
    src_relation = self.relations[srcif]
    for route in routes:
      dest_relation = self.relations[route]
      if dest_relation == CUST:
        outroutes.append(route)
      elif src_relation == CUST:
        outroutes.append(route)
      else:
        return []
    return outroutes
  
  # defining relations
  def cust_only(x):
      return self.relations[x] == PEER or self.relations[x] == PROV

  # obtaining highest prefix
  def get_highest_prefix(self, daddr, routes):
    outroutes = []
    highest_prefix = 0
    dest = daddr.split(".")
    for entry in self.ftab:
      matches = 0
      network = entry[NTWK].split(".")
      netmask = entry[NMSK].split(".")
      for i in range(4):
        bitAnd = int(network[i]) & int(netmask[i])
        if bitAnd == int(dest[i]):
          matches += 1
        else:
          break
      if matches > highest_prefix:
        highest_prefix = matches
        outroutes = [entry[PEER]]
      elif matches == highest_prefix:
        outroutes.append(entry[PEER])
    return outroutes

  # getting shortest route 
  def get_route(self, srcif, daddr):
    peer = None
    routes = self.lookup_routes(daddr)
    routes = self.get_highest_prefix(daddr, routes)
    if routes:
      routes = self.get_highest_preference(routes, daddr)
      routes = self.get_self_origin(routes, daddr)
      routes = self.get_shortest_as_path(routes, daddr)
      routes = self.get_origin_routes(routes, daddr)
      if len(routes) > 0:
        routes = [min(routes)] 
      routes = self.filter_relationships(srcif, daddr, routes)
    if (len(routes) == 1):
        peer = routes[0]
    else:
        print("ERROR MORE THAN 1 ROUTE", routes)  # print error message
    return peer if peer else None 

  # forwarding a data packet
  def forward(self, srcif, packet):
    route = self.get_route(srcif, packet[DEST])
    if route:
        self.send(route ,json.dumps(packet))
        return True
    else:
        packet[TYPE] =  "no route"
        packet[MESG] = {}
        packet[DEST] = packet[SRCE]
        packet[SRCE] = ('.').join(srcif.split('.', 3)[:3]) + '.1'
        self.send(srcif, json.dumps(packet))
        return False

  def adjacent_neighbor(self, entry_net, update_net):
      s1 = entry_net.split(".")
      s2 = update_net.split(".")
      twoRaised = [2**j for j in range(8)]
      for i in range(4):
          if s1[i] == s2[i]:
            continue
          elif abs(int(s1[i]) - int(s2[i])) == 1:
              return True
          elif (s1[i] == "0" and int(s2[i]) in twoRaised) or (s2[i] == "0" and s1[i] in twoRaised):
            return True
      return False

  def same_atts(self, entry, packet):
      msg = packet[MESG]
      return entry[PEER] == packet[SRCE] and entry[LPRF]==msg[LPRF] and entry[APTH]==msg[APTH] and entry[ORIG] == msg[ORIG] and entry[SORG] == msg[SORG]
  
  # shifting mask better
  def shift_mask_bit(self, mask):
      shift = mask.split(".")
      for i in range(4):
          if not shift[i] == '255':
              oct = shift[i]
              currIdx = i
              if shift[i] == '0':
                  oct = shift[i-1]
                  currIdx= i-1
              temp = int(bin(int(oct)<<1)[3:],2)
              shift[currIdx] = str(temp)
              break
      shifted_mask = '.'.join(shift)
      return shifted_mask

  def sameAfterNetmask(self, entry, packet):
    netmask = entry[NMSK].split(".")
    s1 = entry[NTWK].split(".")
    s2 = packet[NTWK].split(".")
    for i in range(4):
      afterNetmask = int(s2[i]) & int(netmask[i])
      if s1[i] == s2[i]:
        continue
      elif int(s1[i]) == afterNetmask:
        continue
      else:
        return False
    return True
 
  # coalescing routes that are adjacent to each other
  def coalesce(self, packet):
    coalesce_successful = False
    for entry in self.ftab:
          if self.same_atts(entry, packet):
            if self.adjacent_neighbor(entry[NTWK], packet[MESG][NTWK]):
              temp = entry[NMSK]
              entry[NMSK] = self.shift_mask_bit(temp)
              coalesce_successful = True
            elif self.sameAfterNetmask(entry, packet[MESG]):
              coalesce_successful = True
    return coalesce_successful

  #  handling update packets
  def update(self, srcif, packet):
    msg = packet[MESG]
    if not self.coalesce(packet):
        self.ftab.append({
          NTWK: msg[NTWK], 
          NMSK: msg[NMSK], 
          PEER: packet[SRCE],
          LPRF: msg[LPRF],
          APTH: msg[APTH],
          ORIG: msg[ORIG],
          SORG: msg[SORG]
          }) 
    packet['srcif'] = srcif
    self.updates.append(packet)
    src_relationship = self.relations[srcif]
    for socket in self.sockets:
      newPacket = copy.deepcopy(packet)
      newSource = ('.').join(socket.split('.', 3)[:3]) + '.1'
      newPacket[SRCE] = newSource
      newPacket[DEST] = socket
      newPacket[MESG][APTH].append(int(self.asn))
      dest_relationship = self.relations[socket]
      if src_relationship == CUST:
        if(socket != srcif):
          self.send(socket, json.dumps(newPacket))
      elif dest_relationship == CUST:
        self.send(socket, json.dumps(newPacket))
    return True

  # update the table
  def updateTable(self, packet):
    self.updates.append(packet)
    msg = packet[MESG]
    if not self.coalesce(packet):
        self.ftab.append({
          NTWK: msg[NTWK], 
          NMSK: msg[NMSK], 
          PEER: packet[SRCE],
          LPRF: msg[LPRF],
          APTH: msg[APTH],
          ORIG: msg[ORIG],
          SORG: msg[SORG]
    }) 

  # updating the forwarding table
  def rebuildForwardingTable(self, packet):
    originalUpdates = copy.deepcopy(self.updates)
    self.updates = []
    self.ftab = []
    for update in originalUpdates:
      for network in packet[MESG]:
        sameSource = update[SRCE] == packet[SRCE]
        sameDest = update[DEST] == packet[DEST] 
        if update[TYPE] == UPDT:
          sameNetwork = update[MESG][NTWK] == network[NTWK]
          sameNetmask = update[MESG][NMSK] == network[NMSK]
          sameNetworkBeingRevoked = sameSource and sameDest and sameNetwork and sameNetmask
          if not sameNetworkBeingRevoked:
            self.updateTable(update)

      if update[TYPE] == RVKE:
          self.updateRevokeFtab(update)
 
  def updateRevokeFtab(self, packet):
    self.rebuildForwardingTable(packet)
    self.updates.append(packet)
  
  # handle revoked packets 
  def revoke(self, packet):
    self.rebuildForwardingTable(packet) 
    self.updates.append(packet)
    newPacket = copy.deepcopy(packet)
    relationToMessageSender = self.relations[packet[SRCE]]
    if relationToMessageSender == CUST:
      for socket in self.sockets:
        if (socket != packet[SRCE]):
            newSource = ('.').join(socket.split('.', 3)[:3]) + '.1'
            newPacket[SRCE] = newSource
            newPacket[DEST] = socket
            self.send(socket, json.dumps(newPacket))
    elif relationToMessageSender == PEER or relationToMessageSender == PROV:
      for socket in self.sockets:
        relationToSocket == self.relations[socket]
        if relationToSocket == CUST:
            newSource = ('.').join(socket.split('.', 3)[:3]) + '.1'
            newPacket[SRCE] = newSource
            newPacket[DEST] = socket
            self.send(socket, json.dumps(newPacket))
    return True

  # handling dump table requests 
  def dump(self, packet):
    response = {}
    response[SRCE] = packet[DEST]
    response[DEST] = packet[SRCE]
    response[TYPE] = TABL
    response[MESG] = self.ftab
    self.send(packet[SRCE], json.dumps(response))
    return True
  
  # handling the packet
  def handle_packet(self, srcif, packet):
    t = packet['type']
    if(t == UPDT):
        return self.update(srcif, packet)
    elif(t == DATA):
        return self.forward(srcif, packet)    
    elif(t == DUMP):
        return self.dump(packet)
    elif(t == RVKE):
        return self.revoke(packet)
    else:
        return False


  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return
	
  # function to run the router
  def run(self):
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn')
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn, ARGS.networks).run()
